[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source ~/.vim/dein/plugins/denite.vim'
hook_add = '''
  nnoremap <silent> <Leader>dr
    \ :<C-u>Denite -buffer-name=register
    \ register neoyank<CR>
  xnoremap <silent> <Leader>dr
    \ :<C-u>Denite -default-action=replace -buffer-name=register
    \ register neoyank<CR>

  nnoremap <silent> <Leader>d<Space>
    \ :<C-u>Denite file/rec:~/.vim<CR>
  nnoremap <silent> <Leader>s :<C-u>Denite file/point
    \ -sorters=sorter/rank
    \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`
    \ file file:new<CR>

  nnoremap <silent> <Leader>dn :<C-u>Denite dein<CR>
  nnoremap <silent> <Leader>dg :<C-u>Denite ghq<CR>
  nnoremap <silent> ;g :<C-u>Denite -buffer-name=search
    \ -no-empty grep<CR>
  nnoremap <silent> ;n :<C-u>Denite -buffer-name=search -resume<CR>
  nnoremap <silent> <Leader>ft :<C-u>Denite filetype<CR>
  nnoremap <silent> <C-k> :<C-u>Denite change jump<CR>
  nnoremap <silent> ;;
    \ :<C-u>Denite command command_history<CR>
'''

[plugins.ftplugin]
denite = '''
" Define mappings
nnoremap <silent><buffer><expr> <CR>
\ denite#do_map('do_action')
nnoremap <silent><buffer><expr> a
\ denite#do_map('choose_action')
nnoremap <silent><buffer><expr> d
\ denite#do_map('do_action', 'delete')
nnoremap <silent><buffer><expr> p
\ denite#do_map('do_action', 'preview')
nnoremap <silent><buffer><expr> q
\ denite#do_map('quit')
nnoremap <silent><buffer><expr> '
\ denite#do_map('quick_move')
nnoremap <silent><buffer><expr> i
\ denite#do_map('open_filter_buffer')
nnoremap <silent><buffer><expr> <Space>
\ denite#do_map('toggle_select').'j'
'''

[[plugins]]
repo = 'Shougo/unite.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = 'denite.nvim'

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = 'let g:fruzzy#sortonempty = 0'
hook_post_update = 'call fruzzy#install()'

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> <Leader>N :<C-u>call deol#new({'command': 'zsh'})<CR>
  nnoremap <silent> [Space]s :<C-u>Deol zsh<CR>
  nnoremap <silent> [window]D  :<C-u>call deol#kill_editor()<CR>
'''
hook_source = '''
  let g:deol#prompt_pattern = '% \|%$'
  set shell=zsh

  " Set to $PATH.
  let s:bin = dein#get('vim-themis').rtp . '/bin'

  function! s:split_envpath(path) abort "{{{
    let delimiter = has('win32') ? ';' : ':'
    if stridx(a:path, '\' . delimiter) < 0
      return split(a:path, delimiter)
    endif
    let split = split(a:path, '\\\@<!\%(\\\\\)*\zs' . delimiter)
    return map(split,'substitute(v:val, ''\\\([\\'
      \ . delimiter . ']\)'', "\\1", "g")')
  endfunction"}}}

  function! s:join_envpath(list, orig_path, add_path) abort "{{{
    let delimiter = has('win32') ? ';' : ':'
    return (stridx(a:orig_path, '\' . delimiter) < 0
      \ && stridx(a:add_path, delimiter) < 0) ?
      \   join(a:list, delimiter) :
      \   join(map(copy(a:list),
      \        "substitute(v:path, ',\\|\\\\,\\@=', '\\\\\\0', 'g')"),
      \        delimiter)
  endfunction"}}}

  let $PATH = s:join_envpath(
    \ dein#util#_uniq(insert(
    \    s:split_envpath($PATH), s:bin)), $PATH, s:bin)
  let $THEMIS_HOME = dein#get('vim-themis').rtp

  unlet s:bin

  autocmd FileType deol call s:on_deol()
  function! s:on_deol() abort
    nnoremap <buffer><silent> [Space]gc :<C-u>call deol#send('git commit')<CR>
    nnoremap <buffer><silent> [Space]gs :<C-u>call deol#send('git status')<CR>
    nnoremap <buffer><silent> [Space]gA :<C-u>call deol#send('git commit --amend')<CR>
  endfunction
'''

[plugins.ftplugin]
deol = '''
nnoremap <buffer><silent> [Space]gc
\ :<C-u>call deol#send('git commit')<CR>
nnoremap <buffer><silent> [Space]gA
\ :<C-u>call deol#send('git commit --amend')<CR>
nmap <buffer> i <Plug>(deol_edit)
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
hook_add = 'nnoremap <silent> <Leader>ff :<C-u>VimFiler -invisible<CR>'
hook_source = '''
  call vimfiler#custom#profile('default', 'context', {
    \ 'safe' : 0,
    \ 'auto_expand' : 1,
    \ 'parent' : 0,
    \ })

  let g:vimfiler_as_default_explorer = 1
  " Like Textmate icons.
  let g:vimfiler_tree_leaf_icon = ' '
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_file_icon = ' '
  let g:vimfiler_readonly_file_icon = '✗'
  let g:vimfiler_marked_file_icon = '✓'

  autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
  function! s:vimfiler_my_settings() abort "{{{
    nmap <buffer> <Tab> <Plug>(vimfiler_switch_to_other_window)
  endfunction"}}}
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = 'BufWrite'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)a
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
  nmap <silent>sc <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> gc
      silent! xunmap <buffer> gc
      silent! nunmap <buffer> gcc
      silent! xunmap <buffer> gcc
    else
      nmap <buffer> gc <Plug>(caw:prefix)
      xmap <buffer> gc <Plug>(caw:prefix)
      nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
  call InitCaw()
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  nnoremap <Leader>tb :<C-u>TagbarToggle<Enter>
'''
hook_source = '''
  let g:tagbar_left = 0
  let g:tagbar_autofocus = 1
  let g:tagbar_autoshowtag = 1
  let g:tagbar_type_ruby = {
    \ 'kinds' : [
      \ 'm:modules',
      \ 'c:classes',
      \ 'd:describes',
      \ 'C:contexts',
      \ 'f:methods',
      \ 'F:singleton methods'
    \ ]
  \ }
  let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
      \ 'p:package',
      \ 'i:imports:1',
      \ 'c:constants',
      \ 'v:variables',
      \ 't:types',
      \ 'n:interfaces',
      \ 'w:fields',
      \ 'e:embedded',
      \ 'm:methods',
      \ 'r:constructor',
      \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
      \ 't' : 'ctype',
      \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
      \ 'ctype' : 't',
      \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
  \}
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap J <Plug>(jplus)
  vmap J <Plug>(jplus)
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'mukiwu/vim-twig'
on_ft = 'twig'

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'hashivim/vim-vagrant'
on_ft = 'Vagrantfile'

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = 'terraform'
hook_source = '''
  let g:terraform_fmt_on_save = 1
'''

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'
on_ft = 'terraform'

[[plugins]]
repo = 'spacewander/openresty-vim'
on_ft = 'nginx'
