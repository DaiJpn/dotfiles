[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_source = ['vimshell.vim', 'unite.vim']

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = 'vimproc.vim'
on_map = {n = '<Plug>'}
hook_source = 'source ~/.vim/dein/plugins/quickrun.vim'

repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source ~/.vim/dein/plugins/denite.vim'
hook_add = '''
  nnoremap <silent> <Leader>dr
    \ :<C-u>Denite -buffer-name=register
    \ register neoyank<CR>
  xnoremap <silent> <Leader>gr
    \ :<C-u>Denite -default-action=replace -buffer-name=register
    \ register neoyank<CR>

  nnoremap <silent> <Leader>d<Space>
    \ :<C-u>Denite file_rec:~/.vim<CR>
  nnoremap <silent> / :<C-u>Denite -buffer-name=search
    \ line<CR>
  nnoremap <silent> * :<C-u>DeniteCursorWord -buffer-name=search
    \ -mode=normal line<CR>
  nnoremap <silent> <Leader>s :<C-u>Denite file_point file_old
    \ `finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`<CR>

  nnoremap <silent> <Leader>dn :<C-u>Denite dein<CR>
  nnoremap <silent> <Leader>dg :<C-u>Denite ghq<CR>
  nnoremap <silent> ;g :<C-u>Denite -buffer-name=search
    \ -no-empty -mode=normal grep<CR>
  nnoremap <silent> n :<C-u>Denite -buffer-name=search
    \ -resume -mode=normal -refresh<CR>
  nnoremap <silent> <Leader>ft :<C-u>Denite filetype<CR>
  nnoremap <silent> <C-t> :<C-u>Denite
    \ -select=`tabpagenr()-1` -mode=normal deol<CR>
  nnoremap <silent> <C-k> :<C-u>Denite -mode=normal change jump<CR>
'''

[[plugins]]
repo = 'Shougo/unite.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_map = {n = '<Plug>'}
on_if = "!has('nvim')"
hook_add = 'nmap <Leader>s <Plug>(vimshell_switch)'
hook_source = 'source ~/.vim/dein/plugins/vimshell.vim'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "has('lua')"
on_i = 1
hook_source = '''
  let g:neocomplete#enable_at_startup = 1
  source ~/.vim/dein/plugins/neocomplete.vim
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
hook_add = 'nnoremap <silent> <Leader>f :<C-u>VimFiler -invisible<CR>'
hook_source = '''
  call vimfiler#custom#profile('default', 'context', {
    \ 'safe' : 0,
    \ 'auto_expand' : 1,
    \ 'parent' : 0,
    \ })

  let g:vimfiler_as_default_explorer = 1
  " Like Textmate icons.
  let g:vimfiler_tree_leaf_icon = ' '
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_file_icon = ' '
  let g:vimfiler_readonly_file_icon = '✗'
  let g:vimfiler_marked_file_icon = '✓'

  autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
  function! s:vimfiler_my_settings() abort "{{{
    nmap <buffer> <Tab> <Plug>(vimfiler_switch_to_other_window)
  endfunction"}}}
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = 'BufWrite'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)a
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
  nmap <silent>sc <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> gc
      silent! xunmap <buffer> gc
      silent! nunmap <buffer> gcc
      silent! xunmap <buffer> gcc
    else
      nmap <buffer> gc <Plug>(caw:prefix)
      xmap <buffer> gc <Plug>(caw:prefix)
      nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
  call InitCaw()
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap J <Plug>(jplus)
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'neomake/neomake'
on_event = 'BufWrite'
hook_source = '''
  let g:neomake_error_sign = {'text': '>>', 'texthl': 'Error'}
  let g:neomake_warning_sign = {'text': '>>',  'texthl': 'Todo'}

  let g:neomake_javascript_enabled_makers = ['eslint']
'''
hook_add = '''
  autocmd MyAutoCmd BufWritePost * Neomake
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
on_ft = 'java'
hook_source = '''
  autocmd MyAutoCmd FileType java setlocal omnifunc=javacomplete#Complete
'''

[[plugins]]
repo = 'tweekmonster/impsort.vim'
on_cmd = 'ImpSort'
hook_source = 'let g:impsort_highlight_imported = 0'

