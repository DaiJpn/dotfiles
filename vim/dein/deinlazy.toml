[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source ~/.vim/dein/plugins/denite.vim'
hook_add = '''
  nnoremap <silent> <Leader>dr
    \ :<C-u>Denite -buffer-name=register
    \ register neoyank<CR>
  xnoremap <silent> <Leader>gr
    \ :<C-u>Denite -default-action=replace -buffer-name=register
    \ register neoyank<CR>

  nnoremap <silent> <Leader>d<Space>
    \ :<C-u>Denite file_rec:~/.vim<CR>
  nnoremap <silent> <Leader>s :<C-u>Denite file_point
    \ `finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`<CR>

  nnoremap <silent> <Leader>dn :<C-u>Denite dein<CR>
  nnoremap <silent> <Leader>dg :<C-u>Denite ghq<CR>
  nnoremap <silent> ;g :<C-u>Denite -buffer-name=grep
    \ -no-empty -mode=normal grep<CR>
  nnoremap <silent> ;n :<C-u>Denite -buffer-name=grep
    \ -resume -mode=normal<CR>
  nnoremap <silent> <Leader>ft :<C-u>Denite filetype<CR>
  nnoremap <silent> <C-t> :<C-u>Denite
    \ -select=`tabpagenr()-1` -mode=normal deol<CR>
  nnoremap <silent> <C-k> :<C-u>Denite -mode=normal change jump<CR>
'''

[[plugins]]
repo = 'Shougo/unite.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = '''
let g:deoplete#enable_at_startup = 1
source ~/.vim/dein/plugins/deoplete.vim
'''

[[plugins]]
repo = 'zchee/deoplete-go'
depends = 'deoplete.nvim'
build = 'make'
on_ft = 'go'
on_i = 1
hook_source = '''
  let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
depends = 'deoplete.nvim'
on_ft = 'python'
on_i = 1

[[plugins]]
repo = 'Shougo/deoplete-rct'
depends = 'deoplete.nvim'
on_ft = 'ruby'
on_i = 1

[[plugins]]
repo = 'zchee/deoplete-zsh'
depends = 'deoplete.nvim'
on_ft = 'zsh'
in_i = 1

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> <Leader>N :<C-u>call deol#new({'command': 'zsh'})<CR>
  nnoremap <silent> [Space]s :<C-u>Deol zsh<CR>
  nnoremap <silent> [window]D  :<C-u>call deol#kill_editor()<CR>
'''
hook_source = '''
  let g:deol#prompt_pattern = '% \|%$'
  set shell=zsh

  " Set to $PATH.
  let s:bin = dein#get('vim-themis').rtp . '/bin'

  function! s:split_envpath(path) abort "{{{
    let delimiter = has('win32') ? ';' : ':'
    if stridx(a:path, '\' . delimiter) < 0
      return split(a:path, delimiter)
    endif
    let split = split(a:path, '\\\@<!\%(\\\\\)*\zs' . delimiter)
    return map(split,'substitute(v:val, ''\\\([\\'
      \ . delimiter . ']\)'', "\\1", "g")')
  endfunction"}}}

  function! s:join_envpath(list, orig_path, add_path) abort "{{{
    let delimiter = has('win32') ? ';' : ':'
    return (stridx(a:orig_path, '\' . delimiter) < 0
      \ && stridx(a:add_path, delimiter) < 0) ?
      \   join(a:list, delimiter) :
      \   join(map(copy(a:list),
      \        "substitute(v:path, ',\\|\\\\,\\@=', '\\\\\\0', 'g')"),
      \        delimiter)
  endfunction"}}}

  let $PATH = s:join_envpath(
    \ dein#util#_uniq(insert(
    \    s:split_envpath($PATH), s:bin)), $PATH, s:bin)
  let $THEMIS_HOME = dein#get('vim-themis').rtp

  unlet s:bin

  autocmd FileType deol call s:on_deol()
  function! s:on_deol() abort
    nnoremap <buffer><silent> [Space]gc :<C-u>call deol#send('git commit')<CR>
    nnoremap <buffer><silent> [Space]gs :<C-u>call deol#send('git status')<CR>
    nnoremap <buffer><silent> [Space]gA :<C-u>call deol#send('git commit --amend')<CR>
  endfunction
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_if = 1

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_if = 1

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
hook_add = 'nnoremap <silent> <Leader>ff :<C-u>VimFiler -invisible<CR>'
hook_source = '''
  call vimfiler#custom#profile('default', 'context', {
    \ 'safe' : 0,
    \ 'auto_expand' : 1,
    \ 'parent' : 0,
    \ })

  let g:vimfiler_as_default_explorer = 1
  " Like Textmate icons.
  let g:vimfiler_tree_leaf_icon = ' '
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_file_icon = ' '
  let g:vimfiler_readonly_file_icon = '✗'
  let g:vimfiler_marked_file_icon = '✓'

  autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
  function! s:vimfiler_my_settings() abort "{{{
    nmap <buffer> <Tab> <Plug>(vimfiler_switch_to_other_window)
  endfunction"}}}
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = 'BufWrite'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)a
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
  nmap <silent>sc <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> gc
      silent! xunmap <buffer> gc
      silent! nunmap <buffer> gcc
      silent! xunmap <buffer> gcc
    else
      nmap <buffer> gc <Plug>(caw:prefix)
      xmap <buffer> gc <Plug>(caw:prefix)
      nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
  call InitCaw()
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap J <Plug>(jplus)
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'w0rp/ale'
on_if = 1
hook_source = '''
  let g:ale_statusline_format = ['E%d', 'W%d', '']
'''

[[plugins]]
repo = 'tweekmonster/impsort.vim'
on_cmd = 'ImpSort'
hook_source = 'let g:impsort_highlight_imported = 0'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
on_ft = 'java'
hook_source = '''
  autocmd MyAutoCmd FileType java setlocal omnifunc=javacomplete#Complete
'''

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'shawncplus/phpcomplete.vim'
on_ft = 'php'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'mukiwu/vim-twig'
on_ft = 'twig'

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'

[[plugins]]
repo = 'hashivim/vim-vagrant'
on_ft = 'Vagrantfile'

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = 'terraform'
hook_source = '''
  let g:terraform_fmt_on_save = 1
'''

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'
on_ft = 'terraform'

[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = 'yaml'

[[plugins]]
repo = 'spacewander/openresty-vim'
on_ft = 'nginx'

